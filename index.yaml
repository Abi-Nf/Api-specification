openapi: 3.0.3
info:
  title: "STD22078"
  description: "This is an Api specification exercise that we do at HEI"
  version: 1.0.0
  contact:
    name: "RALAIVAO Abigail Ny Fiderana"
    url: "https://github.com/Abi-Nf/Api-specification"
    email: "hei.abigail.3@gmail.com"
servers:
  - url: "http://STD22078"
paths:
  /students:
    get:
      summary: "get all students that study at HEI"
      parameters:
        - in: query
          name: "group"
          content:
            text/plain:
              example: "H3"
          required: false
      responses:
        200:
          description: "Ok, found students"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Student"
        500:
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalError"
  /student:
    get:
      summary: "get student by his STD"
      parameters:
        - in: query
          name: "std"
          content:
            text/plain:
              example: "STD00000"
          required: true
      responses:
        200:
          description: "Ok, found student"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Student"
        400:
          description: "bad request, missing std value"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundStudent"
        404:
          description: "Student not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundStudent"
    post:
      summary: "Add new student"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Student"
      responses:
        201:
          description: "new user created successfully, and return the data of user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Student"
        400:
          description: "bad request, missing value in body"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        415:
          description: "Media type not supported"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MediaNotSupported"
  /teachers:
    get:
      summary: "get all hei teachers"
      responses:
        200:
          description: "find all teachers infos and their functions"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/teacher"
                example:
                  - name: "Mr Ryan"
                    subject: "API"
                    SubjectDescription: "Teach how to does API and client-server works generally. Also using great apps like Postman for api tests"
                  - name: "Mr Lou"
                    subject: "Sys2"
                    SubjectDescription: "Teach how does Devices would interconnect each other through the cloud/internet. especially using AWS"
                  - name: "Mr Toky"
                    subject: "Prog2"
                    SubjectDescription: "Teach Java programming language, especially the OOP and using some framework like Spring"
                  - name: "Mr Sitraka"
                    subject: "Web2"
                    SubjectDescription: "Teach the way to make an interactive interface using React.js, also introducing to typescript language"
                  - name: "Mr Harry"
                    subject: "Sys1"
                    SubjectDescription: "Teach how to exploit the system especially Linux for a good usage"
                  - name: "Mme Sandrine"
                    subject: "MGT1"
                    SubjectDescription: "Teach the world of soft skills, Project management using Jira, Trello and so on, and good utils like Github"
  /teacher:
    get:
      summary: "get info about one teacher"
      description: "get info about a teacher according to query parameter"
      parameters:
        - in: query
          name: "name"
          content:
            text/plain:
              example: "Mr Ryan"
      responses:
        200:
          description: "Ok, found teacher"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/teacher"
              example:
                name: "Mr Ryan"
                subject: "API"
                SubjectDescription: "Teach how to does API and client-server works generally. Also using great apps like Postman for api tests"
        404:
          description: "Teacher name not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeacherNotFound"

components:
  schemas:
    teacher:
      type: object
      properties:
        name:
          type: string
        subject:
          type: string
        SubjectDescription:
          type: string
    TeacherNotFound:
      type: object
      properties:
        status:
          type: integer
          example: 404
        message:
          type: string
          example: teacher info not found
    MediaNotSupported:
      type: object
      properties:
        status:
          type: integer
          example: 415
        message:
          type: string
          example: Only Json body object is acceptable
    BadRequest:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: string
          example: missing value
    NotFoundStudent:
      type: object
      properties:
        status:
          type: integer
          example: 404
        message:
          type: string
          example: student not found
    InternalError:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 500
        message:
          type: string
          example: internal server error
    Student:
      type: object
      properties:
        std:
          type: string
          example: STD22000
        firstname:
          type: string
          example: John
        lastname:
          type: string
          example: doe
        email:
          type: string
          format: email
          example: john@example.com
        group:
          type: string
          example: H3
        class:
          type: string
          example: L1
        birthdate:
          type: string
          format: date
          example: 2000-08-15
